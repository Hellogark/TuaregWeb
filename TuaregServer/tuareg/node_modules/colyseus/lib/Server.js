"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parseURL = require("url-parse");
var uws_1 = require("uws");
var MatchMaker_1 = require("./MatchMaker");
var Protocol_1 = require("./Protocol");
var Worker_1 = require("./cluster/Worker");
var Server = /** @class */ (function () {
    function Server(options) {
        var _this = this;
        this.matchMaker = new MatchMaker_1.MatchMaker();
        this.onConnection = function (client) {
            // TODO: DRY (Worker.ts)
            // ensure URL is parsed.
            var url = parseURL(client.upgradeReq.url, true);
            client.upgradeReq.url = url;
            client.upgradeReq.roomId = url.pathname.substr(1);
            Worker_1.setUserId(client);
            var roomId = client.upgradeReq.roomId;
            if (roomId) {
                _this.matchMaker.bindClient(client, roomId);
            }
            else {
                client.on("message", _this.onMessageMatchMaking.bind(_this, client));
            }
        };
        if (options.server) {
            this.attach({ server: options.server });
        }
    }
    Server.prototype.attach = function (options) {
        if (options.server || options.port) {
            this.server = new uws_1.Server(options);
            this.httpServer = options.server;
        }
        else {
            this.server = options.ws;
        }
        this.server.on('connection', this.onConnection);
    };
    Server.prototype.listen = function (port, hostname, backlog, listeningListener) {
        this.httpServer.listen(port, hostname, backlog, listeningListener);
    };
    Server.prototype.register = function (name, handler, options) {
        if (options === void 0) { options = {}; }
        return this.matchMaker.registerHandler(name, handler, options);
    };
    Server.prototype.onMessageMatchMaking = function (client, message) {
        if (!(message = Protocol_1.decode(message))) {
            return;
        }
        if (message[0] !== Protocol_1.Protocol.JOIN_ROOM) {
            console.error("MatchMaking couldn't process message:", message);
            return;
        }
        var roomName = message[1];
        var joinOptions = message[2];
        joinOptions.clientId = client.id;
        if (!this.matchMaker.hasHandler(roomName)) {
            Protocol_1.send(client, [Protocol_1.Protocol.JOIN_ERROR, roomName, "Error: no available handler for \"" + roomName + "\""]);
        }
        else {
            this.matchMaker.onJoinRoomRequest(roomName, joinOptions, true, function (err, room) {
                var joinRoomResponse = (err)
                    ? [Protocol_1.Protocol.JOIN_ERROR, roomName, err]
                    : [Protocol_1.Protocol.JOIN_ROOM, room.roomId, joinOptions.requestId];
                Protocol_1.send(client, joinRoomResponse);
            });
        }
    };
    return Server;
}());
exports.Server = Server;
