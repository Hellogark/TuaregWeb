"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var cluster = require("cluster");
var commands = require("./commands");
var Store_1 = require("./Store");
exports.Store = Store_1.Store;
exports.store = new Store_1.Store();
var processesById = {};
function masterHandleIncomingMessage(processId, message) {
    if (!message || !commands[message.cmd]) {
        return;
    }
    // run command in master
    try {
        message.result = commands[message.cmd].apply(undefined, message.args);
    }
    catch (e) {
        message.error = e.message;
    }
    // delete irrelevant data to send back to the worker
    delete message['args'];
    // send result back to worker
    processesById[processId].send(message);
}
function workerHandleIncomingMessage(message) {
    if (!message || !commands[message.cmd]) {
        return;
    }
    exports.store.consume(message);
}
if (isMasterNode()) {
    // Setup existing workers
    Object.keys(cluster.workers).forEach(function (workerId) {
        registerProcess(cluster.workers[workerId].process);
    });
    // Listen for new workers to setup
    cluster.on("fork", function (worker) { return registerProcess(worker.process); });
    // Be notified when worker processes die.
    cluster.on('exit', function (worker, code, signal) {
        delete processesById[worker.process.pid];
    });
}
else {
    process.on("message", workerHandleIncomingMessage);
}
function isMasterNode() {
    return (!process.send);
}
exports.isMasterNode = isMasterNode;
function getProcessById(processId) {
    return processesById[processId];
}
exports.getProcessById = getProcessById;
function registerProcess(childProcess) {
    processesById[childProcess.pid] = childProcess;
    childProcess.on("message", function (message) { return masterHandleIncomingMessage(childProcess.pid, message); });
}
exports.registerProcess = registerProcess;
function setup(data) {
    Object.assign(exports.store, data);
}
exports.setup = setup;
//
// Export commands
//
__export(require("./commands"));
